""" 
        python 中 极坐标的表示  比如 当前向量 (4, 3) 根据 勾股定律 算出 算出 他的长度为 5    根号（4**2 + 3**2）
        然后 使用量角器 得到他的度数 为 143度 即 表示为 x轴 正方向逆时针 旋转 37度 
        那么 我们用 （5， 37度） 确定该向量 这种形式称为极坐标

        继续

        此时 我们有一个 长度为3 的向量 逆时针旋转 116.57度 经过量角器 我们 得到 一个线 然后 向下画出 x点 向右
        画出y点 得到一个近似值 (-1.34, 2.68)

        116.57度 很有意思 因为 该 度数下 向量每往左移动一个 则向上会移动2各 因为 2.68 / 1.34 = 2 

        此度数可能的点就有(-1, 2) (-3, 6) 

        由此 每个角度 都有这样的一个固定值 这个值 在数学上 称为 正切
        正切 就是 tan 函数 

        常见的 
        tan(37) ≈ 3/4
        tan(116.57) ≈ 2
        tan(45) ≈1
        tan(200) ≈ 0.36

        ok 熟悉的三角函数 哈 

        那么 正切 等于 垂直距离 y 除以 水平距离 x 
        除此之外 还有 正弦函数 余弦函数
        正弦 sin = 垂直距离 除以 向量长度 (也可说 点到点的距离)
        例子 比如 37度角 每往该角度 走 距离 增加 5 那么 就等于 向量往上走了 3个单位 因为 sin 37 ≈ 3/5
        余弦 cos = 水平距离 除以 向量长度 (也可说 点到点的距离)
         例子 比如 37度角 每往该角度 走 距离 增加 5 那么 就等于 向量水平走了 4个单位 因为 sin 37 ≈ 4/5

         下面 让我们 把三角学识转为 python 代码

"""
from math import tan, pi, sin, cos, sqrt, atan2
# 正切 注意 45的单位 并不是 度数 而是弧度哟~~
print(tan(45))

# 科学家一般不太使用 度数 而是 使用 弧度 1弧度 ≈ 57.296 度
# 之所以这样 是因为 有 π 约等于 3.14159 他搭建了 弧度与度数的转换
# π = 180度 2π = 360度 对于圆而言 半圈就 一个 π 整圈就 2π
# 表示 4/π 45度 表示为 pie/4
# 这才是 45度 正切的真正表达方式
print(tan(pi/4))

# 让我们来定义一个接收 极坐标 返回 其 笛卡尔坐标的函数 注意 度数 统一由弧度代替


def to_cartesian(vector):
    length, angle = vector[0], vector[1]
    return (sin(angle) * length, cos(angle) * length)


# 相当于 37 / 180 代表 37度 在 180度中的比例 乘以 π
angle = 37 * pi / 180

print(to_cartesian((5, angle)))

# 举一反三 定义接收 笛卡尔迪坐标 返回 极坐标的 函数


def to_polar(vector):
    x, y = vector[0], vector[1]
    length = sqrt(x ** 2 + y**2)
    angle = atan2(y, x) # 这里使用了 反正切函数 x y的顺序反着给
    return (length, angle)


print(to_polar((4, 3)))
